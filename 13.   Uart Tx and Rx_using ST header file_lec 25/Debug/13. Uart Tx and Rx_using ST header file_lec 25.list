
13. Uart Tx and Rx_using ST header file_lec 25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001e4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000314  0800031c  0001031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000314  08000314  0001031c  2**0
                  CONTENTS
  4 .ARM          00000000  08000314  08000314  0001031c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000314  0800031c  0001031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000314  08000314  00010314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000318  08000318  00010318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800031c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800031c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001031c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010345  2**0
                  CONTENTS, READONLY
 13 .debug_info   000002ee  00000000  00000000  00010388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000017b  00000000  00000000  00010676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000070  00000000  00000000  000107f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000004a  00000000  00000000  00010868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00011bf4  00000000  00000000  000108b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000678  00000000  00000000  000224a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005f8cf  00000000  00000000  00022b1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000114  00000000  00000000  000823f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00082504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080002fc 	.word	0x080002fc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080002fc 	.word	0x080002fc

08000170 <compute_uart_bd>:

void delay(void)
	{for (uint32_t i=0; i<300000; i++);}

static uint32_t compute_uart_bd(uint32_t PeriphClk, uint32_t Baudrate)
	{    return (PeriphClk / (Baudrate));	}
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	6039      	str	r1, [r7, #0]
 800017a:	687a      	ldr	r2, [r7, #4]
 800017c:	683b      	ldr	r3, [r7, #0]
 800017e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000182:	4618      	mov	r0, r3
 8000184:	370c      	adds	r7, #12
 8000186:	46bd      	mov	sp, r7
 8000188:	bc80      	pop	{r7}
 800018a:	4770      	bx	lr

0800018c <usart2_tx_init>:

void usart2_tx_init(void)
{	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;						//to enable gpio clock
 800018c:	b598      	push	{r3, r4, r7, lr}
 800018e:	af00      	add	r7, sp, #0
 8000190:	4b14      	ldr	r3, [pc, #80]	; (80001e4 <usart2_tx_init+0x58>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a13      	ldr	r2, [pc, #76]	; (80001e4 <usart2_tx_init+0x58>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;					//to enable USART2 clock
 800019c:	4b11      	ldr	r3, [pc, #68]	; (80001e4 <usart2_tx_init+0x58>)
 800019e:	69db      	ldr	r3, [r3, #28]
 80001a0:	4a10      	ldr	r2, [pc, #64]	; (80001e4 <usart2_tx_init+0x58>)
 80001a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001a6:	61d3      	str	r3, [r2, #28]

	GPIOA->CRL &= ~(GPIO_CRL_CNF2);						//clear the CNF bits
 80001a8:	4b0f      	ldr	r3, [pc, #60]	; (80001e8 <usart2_tx_init+0x5c>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	4a0e      	ldr	r2, [pc, #56]	; (80001e8 <usart2_tx_init+0x5c>)
 80001ae:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80001b2:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_MODE2 | GPIO_CRL_CNF2_1 | GPIO_CRL_CNF3_0;		//Output mode, max speed 50 MHz and Alternate function output Push-pull and PA3 input mode to floating input (reset state)
 80001b4:	4b0c      	ldr	r3, [pc, #48]	; (80001e8 <usart2_tx_init+0x5c>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	4a0b      	ldr	r2, [pc, #44]	; (80001e8 <usart2_tx_init+0x5c>)
 80001ba:	f443 4396 	orr.w	r3, r3, #19200	; 0x4b00
 80001be:	6013      	str	r3, [r2, #0]

	USART2->BRR  = compute_uart_bd(APB1_CLK, UART_BAUDRATE);	//set baud rate as EA6
 80001c0:	4c0a      	ldr	r4, [pc, #40]	; (80001ec <usart2_tx_init+0x60>)
 80001c2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80001c6:	480a      	ldr	r0, [pc, #40]	; (80001f0 <usart2_tx_init+0x64>)
 80001c8:	f7ff ffd2 	bl	8000170 <compute_uart_bd>
 80001cc:	4603      	mov	r3, r0
 80001ce:	60a3      	str	r3, [r4, #8]
	//*USART2_BRR = 0XEA6;

	// TE: Transmitter enable, UE: Usart enable and RE: Receiver enable
	USART2->CR1 |= USART_CR1_TE | USART_CR1_UE | USART_CR1_RE;
 80001d0:	4b06      	ldr	r3, [pc, #24]	; (80001ec <usart2_tx_init+0x60>)
 80001d2:	68db      	ldr	r3, [r3, #12]
 80001d4:	4a05      	ldr	r2, [pc, #20]	; (80001ec <usart2_tx_init+0x60>)
 80001d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80001da:	f043 030c 	orr.w	r3, r3, #12
 80001de:	60d3      	str	r3, [r2, #12]
}
 80001e0:	bf00      	nop
 80001e2:	bd98      	pop	{r3, r4, r7, pc}
 80001e4:	40021000 	.word	0x40021000
 80001e8:	40010800 	.word	0x40010800
 80001ec:	40004400 	.word	0x40004400
 80001f0:	007a1200 	.word	0x007a1200

080001f4 <usart2_read>:

char usart2_read(void)
	{	while (!(USART2->SR & USART_SR_RXNE))
 80001f4:	b480      	push	{r7}
 80001f6:	af00      	add	r7, sp, #0
 80001f8:	bf00      	nop
 80001fa:	4b06      	ldr	r3, [pc, #24]	; (8000214 <usart2_read+0x20>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f003 0320 	and.w	r3, r3, #32
 8000202:	2b00      	cmp	r3, #0
 8000204:	d0f9      	beq.n	80001fa <usart2_read+0x6>
		{	}
		return USART2->DR;
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <usart2_read+0x20>)
 8000208:	685b      	ldr	r3, [r3, #4]
 800020a:	b2db      	uxtb	r3, r3
	}
 800020c:	4618      	mov	r0, r3
 800020e:	46bd      	mov	sp, r7
 8000210:	bc80      	pop	{r7}
 8000212:	4770      	bx	lr
 8000214:	40004400 	.word	0x40004400

08000218 <usart2_write>:

void usart2_write(int ch)
	{	//delay();
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
		while (!(USART2->SR & USART_SR_TXE))		// Make sure the transmit data register bit is empty (TXE) or either you can use TC, have little difference only
 8000220:	bf00      	nop
 8000222:	4b07      	ldr	r3, [pc, #28]	; (8000240 <usart2_write+0x28>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800022a:	2b00      	cmp	r3, #0
 800022c:	d0f9      	beq.n	8000222 <usart2_write+0xa>
		{	}
		USART2->DR = (ch & 0xFF) ;					// Write to transmit data register
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	4a03      	ldr	r2, [pc, #12]	; (8000240 <usart2_write+0x28>)
 8000232:	b2db      	uxtb	r3, r3
 8000234:	6053      	str	r3, [r2, #4]
	}
 8000236:	bf00      	nop
 8000238:	370c      	adds	r7, #12
 800023a:	46bd      	mov	sp, r7
 800023c:	bc80      	pop	{r7}
 800023e:	4770      	bx	lr
 8000240:	40004400 	.word	0x40004400

08000244 <main>:

int main(void)
{	usart2_tx_init();
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	f7ff ff9f 	bl	800018c <usart2_tx_init>
	while(1)
	{	char ch = usart2_read();
 800024e:	f7ff ffd1 	bl	80001f4 <usart2_read>
 8000252:	4603      	mov	r3, r0
 8000254:	71fb      	strb	r3, [r7, #7]
		usart2_write(ch);
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	4618      	mov	r0, r3
 800025a:	f7ff ffdd 	bl	8000218 <usart2_write>
	{	char ch = usart2_read();
 800025e:	e7f6      	b.n	800024e <main+0xa>

08000260 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000260:	480d      	ldr	r0, [pc, #52]	; (8000298 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000262:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000264:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000268:	480c      	ldr	r0, [pc, #48]	; (800029c <LoopForever+0x6>)
  ldr r1, =_edata
 800026a:	490d      	ldr	r1, [pc, #52]	; (80002a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800026c:	4a0d      	ldr	r2, [pc, #52]	; (80002a4 <LoopForever+0xe>)
  movs r3, #0
 800026e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000270:	e002      	b.n	8000278 <LoopCopyDataInit>

08000272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000276:	3304      	adds	r3, #4

08000278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800027a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800027c:	d3f9      	bcc.n	8000272 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800027e:	4a0a      	ldr	r2, [pc, #40]	; (80002a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000280:	4c0a      	ldr	r4, [pc, #40]	; (80002ac <LoopForever+0x16>)
  movs r3, #0
 8000282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000284:	e001      	b.n	800028a <LoopFillZerobss>

08000286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000288:	3204      	adds	r2, #4

0800028a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800028a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800028c:	d3fb      	bcc.n	8000286 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800028e:	f000 f811 	bl	80002b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000292:	f7ff ffd7 	bl	8000244 <main>

08000296 <LoopForever>:

LoopForever:
  b LoopForever
 8000296:	e7fe      	b.n	8000296 <LoopForever>
  ldr   r0, =_estack
 8000298:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800029c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002a0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002a4:	0800031c 	.word	0x0800031c
  ldr r2, =_sbss
 80002a8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002ac:	2000001c 	.word	0x2000001c

080002b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002b0:	e7fe      	b.n	80002b0 <ADC1_2_IRQHandler>
	...

080002b4 <__libc_init_array>:
 80002b4:	b570      	push	{r4, r5, r6, lr}
 80002b6:	2600      	movs	r6, #0
 80002b8:	4d0c      	ldr	r5, [pc, #48]	; (80002ec <__libc_init_array+0x38>)
 80002ba:	4c0d      	ldr	r4, [pc, #52]	; (80002f0 <__libc_init_array+0x3c>)
 80002bc:	1b64      	subs	r4, r4, r5
 80002be:	10a4      	asrs	r4, r4, #2
 80002c0:	42a6      	cmp	r6, r4
 80002c2:	d109      	bne.n	80002d8 <__libc_init_array+0x24>
 80002c4:	f000 f81a 	bl	80002fc <_init>
 80002c8:	2600      	movs	r6, #0
 80002ca:	4d0a      	ldr	r5, [pc, #40]	; (80002f4 <__libc_init_array+0x40>)
 80002cc:	4c0a      	ldr	r4, [pc, #40]	; (80002f8 <__libc_init_array+0x44>)
 80002ce:	1b64      	subs	r4, r4, r5
 80002d0:	10a4      	asrs	r4, r4, #2
 80002d2:	42a6      	cmp	r6, r4
 80002d4:	d105      	bne.n	80002e2 <__libc_init_array+0x2e>
 80002d6:	bd70      	pop	{r4, r5, r6, pc}
 80002d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80002dc:	4798      	blx	r3
 80002de:	3601      	adds	r6, #1
 80002e0:	e7ee      	b.n	80002c0 <__libc_init_array+0xc>
 80002e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80002e6:	4798      	blx	r3
 80002e8:	3601      	adds	r6, #1
 80002ea:	e7f2      	b.n	80002d2 <__libc_init_array+0x1e>
 80002ec:	08000314 	.word	0x08000314
 80002f0:	08000314 	.word	0x08000314
 80002f4:	08000314 	.word	0x08000314
 80002f8:	08000318 	.word	0x08000318

080002fc <_init>:
 80002fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002fe:	bf00      	nop
 8000300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000302:	bc08      	pop	{r3}
 8000304:	469e      	mov	lr, r3
 8000306:	4770      	bx	lr

08000308 <_fini>:
 8000308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800030a:	bf00      	nop
 800030c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800030e:	bc08      	pop	{r3}
 8000310:	469e      	mov	lr, r3
 8000312:	4770      	bx	lr
